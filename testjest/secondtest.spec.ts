import { Methods } from '../src/calc';

describe('Methods', () => {
    let methods: Methods;

    beforeEach(() => {
        methods = new Methods();
    });

    // Положительные тесты
    it('должен вернуть 5 для рассчёта ("2", "+", "3")', () => {
        expect(methods.calculate('2', '+', '3')).toBe(5);
    });

    it('должен вернуть 4 для рассчёта ("6", "-", "2")', () => {
        expect(methods.calculate('6', '-', '2')).toBe(4);
    });

    it('должен вернуть 8 для рассчёта ("4", "*", "2")', () => {
        expect(methods.calculate('4', '*', '2')).toBe(8);
    });

    it('должен вернуть 8 для рассчёта ("24", "/", "3")', () => {
        expect(methods.calculate('24', '/', '3')).toBe(8);
    });

    it('должен вернуть 1 для рассчёта ("10", "%", "3")', () => {
        expect(methods.calculate('10', '%', '3')).toBe(1);
    });

    it('должен вернуть 25 для квадрата ("5")', () => {
        expect(methods.square('5')).toBe(25);
    });

    // Отрицательные тесты
    it('должно выдать ошибку из-за недопустимой операции', () => {
        expect(() => methods.calculate('5', '^', '3')).toThrow('Неверная операция: ^');
    });

    it('должно выдавать ошибку при делении на ноль', () => {
        expect(() => methods.calculate('5', '/', '0')).toThrow('Деление на ноль');
    });

    it('должно выдавать ошибку из-за недопустимого первого операнда', () => {
        expect(() => methods.calculate('abc', '+', '3')).toThrow('Неверное число: abc');
    });

    it('должно выдавать ошибку из-за недопустимого второго операнда', () => {
        expect(() => methods.calculate('5', '+', 'xyz')).toThrow('Неверное число: xyz');
    });

    it('должно выдавать ошибку для квадрата недопустимого числа', () => {
        expect(() => methods.square('abc')).toThrow('Неверное число: abc');
    });
});
